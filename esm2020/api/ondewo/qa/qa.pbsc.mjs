/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './qa.pb';
import * as googleProtobuf003 from '@ngx-grpc/well-known-types';
import { GRPC_QA_CLIENT_SETTINGS } from './qa.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.qa.QA
 */
export class QAClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.qa.QA/GetAnswer
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.GetAnswerResponse>>
			 */
			getAnswer: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/GetAnswer',
					requestData,
					requestMetadata,
					requestClass: thisProto.GetAnswerRequest,
					responseClass: thisProto.GetAnswerResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/RunScraper
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.RunScraperResponse>>
			 */
			runScraper: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/RunScraper',
					requestData,
					requestMetadata,
					requestClass: thisProto.RunScraperRequest,
					responseClass: thisProto.RunScraperResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/UpdateDatabase
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.UpdateDatabaseResponse>>
			 */
			updateDatabase: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/UpdateDatabase',
					requestData,
					requestMetadata,
					requestClass: thisProto.UpdateDatabaseRequest,
					responseClass: thisProto.UpdateDatabaseResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/RunTraining
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.RunTrainingResponse>>
			 */
			runTraining: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/RunTraining',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf003.Empty,
					responseClass: thisProto.RunTrainingResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/GetServerState
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.GetServerStateResponse>>
			 */
			getServerState: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/GetServerState',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf003.Empty,
					responseClass: thisProto.GetServerStateResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/ListProjectIds
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ListProjectIdsResponse>>
			 */
			listProjectIds: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/ListProjectIds',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf003.Empty,
					responseClass: thisProto.ListProjectIdsResponse
				});
			},
			/**
			 * Unary call: /ondewo.qa.QA/GetProjectConfig
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.GetProjectConfigResponse>>
			 */
			getProjectConfig: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.qa.QA/GetProjectConfig',
					requestData,
					requestMetadata,
					requestClass: thisProto.GetProjectConfigRequest,
					responseClass: thisProto.GetProjectConfigResponse
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.qa.QA', settings);
	}
	/**
	 * Unary call @/ondewo.qa.QA/GetAnswer
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetAnswerResponse>
	 */
	getAnswer(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getAnswer(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/RunScraper
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.RunScraperResponse>
	 */
	runScraper(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.runScraper(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/UpdateDatabase
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.UpdateDatabaseResponse>
	 */
	updateDatabase(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.updateDatabase(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/RunTraining
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.RunTrainingResponse>
	 */
	runTraining(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.runTraining(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/GetServerState
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetServerStateResponse>
	 */
	getServerState(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getServerState(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/ListProjectIds
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ListProjectIdsResponse>
	 */
	listProjectIds(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.listProjectIds(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.qa.QA/GetProjectConfig
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetProjectConfigResponse>
	 */
	getProjectConfig(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getProjectConfig(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
}
QAClient.ɵfac = i0.ɵɵngDeclareFactory({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: QAClient,
	deps: [{ token: GRPC_QA_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }],
	target: i0.ɵɵFactoryTarget.Injectable
});
QAClient.ɵprov = i0.ɵɵngDeclareInjectable({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: QAClient,
	providedIn: 'any'
});
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: QAClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_QA_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
