/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './webhook.pb';
import { GRPC_WEBHOOK_CLIENT_SETTINGS } from './webhook.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.Webhook
 */
export class WebhookClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.nlu.Webhook/ResponseRefinement
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.WebhookResponse>>
			 */
			responseRefinement: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Webhook/ResponseRefinement',
					requestData,
					requestMetadata,
					requestClass: thisProto.WebhookRequest,
					responseClass: thisProto.WebhookResponse
				});
			},
			/**
			 * Unary call: /ondewo.nlu.Webhook/SlotFilling
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.WebhookResponse>>
			 */
			slotFilling: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Webhook/SlotFilling',
					requestData,
					requestMetadata,
					requestClass: thisProto.WebhookRequest,
					responseClass: thisProto.WebhookResponse
				});
			},
			/**
			 * Unary call: /ondewo.nlu.Webhook/Ping
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.PingResponse>>
			 */
			ping: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Webhook/Ping',
					requestData,
					requestMetadata,
					requestClass: thisProto.PingRequest,
					responseClass: thisProto.PingResponse
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.nlu.Webhook', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.Webhook/ResponseRefinement
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.WebhookResponse>
	 */
	responseRefinement(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.responseRefinement(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Webhook/SlotFilling
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.WebhookResponse>
	 */
	slotFilling(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.slotFilling(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Webhook/Ping
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.PingResponse>
	 */
	ping(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.ping(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
}
WebhookClient.ɵfac = i0.ɵɵngDeclareFactory({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: WebhookClient,
	deps: [
		{ token: GRPC_WEBHOOK_CLIENT_SETTINGS, optional: true },
		{ token: GRPC_CLIENT_FACTORY },
		{ token: i1.GrpcHandler }
	],
	target: i0.ɵɵFactoryTarget.Injectable
});
WebhookClient.ɵprov = i0.ɵɵngDeclareInjectable({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: WebhookClient,
	providedIn: 'any'
});
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: WebhookClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_WEBHOOK_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
