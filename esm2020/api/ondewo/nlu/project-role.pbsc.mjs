/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './project-role.pb';
import * as googleProtobuf004 from '@ngx-grpc/well-known-types';
import { GRPC_PROJECT_ROLES_CLIENT_SETTINGS } from './project-role.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.ProjectRoles
 */
export class ProjectRolesClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.nlu.ProjectRoles/CreateProjectRole
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
			 */
			createProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.ProjectRoles/CreateProjectRole',
					requestData,
					requestMetadata,
					requestClass: thisProto.CreateProjectRoleRequest,
					responseClass: thisProto.ProjectRole
				});
			},
			/**
			 * Unary call: /ondewo.nlu.ProjectRoles/GetProjectRole
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
			 */
			getProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.ProjectRoles/GetProjectRole',
					requestData,
					requestMetadata,
					requestClass: thisProto.GetProjectRoleRequest,
					responseClass: thisProto.ProjectRole
				});
			},
			/**
			 * Unary call: /ondewo.nlu.ProjectRoles/DeleteProjectRole
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
			 */
			deleteProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.ProjectRoles/DeleteProjectRole',
					requestData,
					requestMetadata,
					requestClass: thisProto.DeleteProjectRoleRequest,
					responseClass: googleProtobuf004.Empty
				});
			},
			/**
			 * Unary call: /ondewo.nlu.ProjectRoles/UpdateProjectRole
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
			 */
			updateProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.ProjectRoles/UpdateProjectRole',
					requestData,
					requestMetadata,
					requestClass: thisProto.UpdateProjectRoleRequest,
					responseClass: thisProto.ProjectRole
				});
			},
			/**
			 * Unary call: /ondewo.nlu.ProjectRoles/ListProjectRoles
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ListProjectRolesResponse>>
			 */
			listProjectRoles: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.ProjectRoles/ListProjectRoles',
					requestData,
					requestMetadata,
					requestClass: thisProto.ListProjectRolesRequest,
					responseClass: thisProto.ListProjectRolesResponse
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.nlu.ProjectRoles', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectRoles/CreateProjectRole
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ProjectRole>
	 */
	createProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.createProjectRole(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectRoles/GetProjectRole
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ProjectRole>
	 */
	getProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getProjectRole(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectRoles/DeleteProjectRole
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf004.Empty>
	 */
	deleteProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.deleteProjectRole(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectRoles/UpdateProjectRole
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ProjectRole>
	 */
	updateProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.updateProjectRole(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectRoles/ListProjectRoles
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ListProjectRolesResponse>
	 */
	listProjectRoles(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.listProjectRoles(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
}
ProjectRolesClient.ɵfac = i0.ɵɵngDeclareFactory({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ProjectRolesClient,
	deps: [
		{ token: GRPC_PROJECT_ROLES_CLIENT_SETTINGS, optional: true },
		{ token: GRPC_CLIENT_FACTORY },
		{ token: i1.GrpcHandler }
	],
	target: i0.ɵɵFactoryTarget.Injectable
});
ProjectRolesClient.ɵprov = i0.ɵɵngDeclareInjectable({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ProjectRolesClient,
	providedIn: 'any'
});
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ProjectRolesClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_PROJECT_ROLES_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
