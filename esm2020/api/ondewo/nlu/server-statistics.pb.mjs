import { BinaryReader, BinaryWriter } from 'google-protobuf';
/**
 * Message implementation for ondewo.nlu.GetUserProjectCountRequest
 */
export class GetUserProjectCountRequest {
	/**
	 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
	 * @param _value initial values object or instance of GetUserProjectCountRequest to deeply clone from
	 */
	constructor(_value) {
		_value = _value || {};
		this.userId = _value.userId;
		GetUserProjectCountRequest.refineValues(this);
	}
	/**
	 * Deserialize binary data to message
	 * @param instance message instance
	 */
	static deserializeBinary(bytes) {
		const instance = new GetUserProjectCountRequest();
		GetUserProjectCountRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
		return instance;
	}
	/**
	 * Check all the properties and set default protobuf values if necessary
	 * @param _instance message instance
	 */
	static refineValues(_instance) {
		_instance.userId = _instance.userId || '';
	}
	/**
	 * Deserializes / reads binary message into message instance using provided binary reader
	 * @param _instance message instance
	 * @param _reader binary reader instance
	 */
	static deserializeBinaryFromReader(_instance, _reader) {
		while (_reader.nextField()) {
			if (_reader.isEndGroup()) break;
			switch (_reader.getFieldNumber()) {
				case 1:
					_instance.userId = _reader.readString();
					break;
				default:
					_reader.skipField();
			}
		}
		GetUserProjectCountRequest.refineValues(_instance);
	}
	/**
	 * Serializes a message to binary format using provided binary reader
	 * @param _instance message instance
	 * @param _writer binary writer instance
	 */
	static serializeBinaryToWriter(_instance, _writer) {
		if (_instance.userId) {
			_writer.writeString(1, _instance.userId);
		}
	}
	get userId() {
		return this._userId;
	}
	set userId(value) {
		this._userId = value;
	}
	/**
	 * Serialize message to binary data
	 * @param instance message instance
	 */
	serializeBinary() {
		const writer = new BinaryWriter();
		GetUserProjectCountRequest.serializeBinaryToWriter(this, writer);
		return writer.getResultBuffer();
	}
	/**
	 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
	 */
	toObject() {
		return {
			userId: this.userId
		};
	}
	/**
	 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
	 */
	toJSON() {
		return this.toObject();
	}
	/**
	 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
	 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
	 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
	 */
	toProtobufJSON(
		// @ts-ignore
		options
	) {
		return {
			userId: this.userId
		};
	}
}
GetUserProjectCountRequest.id = 'ondewo.nlu.GetUserProjectCountRequest';
//# sourceMappingURL=data:application/json;base64,
