/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './sip.pb';
import * as googleProtobuf000 from '@ngx-grpc/well-known-types';
import { GRPC_SIP_CLIENT_SETTINGS } from './sip.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.sip.Sip
 */
export class SipClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.sip.Sip/StartSession
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			startSession: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/StartSession',
					requestData,
					requestMetadata,
					requestClass: thisProto.StartSessionRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/EndSession
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			endSession: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/EndSession',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf000.Empty,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/StartCall
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			startCall: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/StartCall',
					requestData,
					requestMetadata,
					requestClass: thisProto.StartCallRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/EndCall
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			endCall: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/EndCall',
					requestData,
					requestMetadata,
					requestClass: thisProto.EndCallRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/TransferCall
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			transferCall: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/TransferCall',
					requestData,
					requestMetadata,
					requestClass: thisProto.TransferCallRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/RegisterAccount
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			registerAccount: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/RegisterAccount',
					requestData,
					requestMetadata,
					requestClass: thisProto.RegisterAccountRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/GetSipStatus
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.SipStatus>>
			 */
			getSipStatus: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/GetSipStatus',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf000.Empty,
					responseClass: thisProto.SipStatus
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/GetSipStatusHistory
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.SipStatusHistoryResponse>>
			 */
			getSipStatusHistory: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/GetSipStatusHistory',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf000.Empty,
					responseClass: thisProto.SipStatusHistoryResponse
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/PlayWavFiles
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			playWavFiles: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/PlayWavFiles',
					requestData,
					requestMetadata,
					requestClass: thisProto.PlayWavFilesRequest,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/Mute
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			mute: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/Mute',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf000.Empty,
					responseClass: googleProtobuf000.Empty
				});
			},
			/**
			 * Unary call: /ondewo.sip.Sip/UnMute
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf000.Empty>>
			 */
			unMute: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.sip.Sip/UnMute',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf000.Empty,
					responseClass: googleProtobuf000.Empty
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.sip.Sip', settings);
	}
	/**
	 * Unary call @/ondewo.sip.Sip/StartSession
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	startSession(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.startSession(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/EndSession
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	endSession(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.endSession(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/StartCall
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	startCall(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.startCall(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/EndCall
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	endCall(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.endCall(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/TransferCall
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	transferCall(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.transferCall(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/RegisterAccount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	registerAccount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.registerAccount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/GetSipStatus
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.SipStatus>
	 */
	getSipStatus(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getSipStatus(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/GetSipStatusHistory
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.SipStatusHistoryResponse>
	 */
	getSipStatusHistory(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getSipStatusHistory(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/PlayWavFiles
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	playWavFiles(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.playWavFiles(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/Mute
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	mute(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.mute(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.sip.Sip/UnMute
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf000.Empty>
	 */
	unMute(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.unMute(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
}
SipClient.ɵfac = i0.ɵɵngDeclareFactory({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: SipClient,
	deps: [
		{ token: GRPC_SIP_CLIENT_SETTINGS, optional: true },
		{ token: GRPC_CLIENT_FACTORY },
		{ token: i1.GrpcHandler }
	],
	target: i0.ɵɵFactoryTarget.Injectable
});
SipClient.ɵprov = i0.ɵɵngDeclareInjectable({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: SipClient,
	providedIn: 'any'
});
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '14.2.0',
	ngImport: i0,
	type: SipClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_SIP_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
