import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as googleProtobuf000 from '@ngx-grpc/well-known-types';
/**
 * Message implementation for ondewo.nlu.OperationMetadata
 */
export class OperationMetadata {
	static {
		this.id = 'ondewo.nlu.OperationMetadata';
	}
	/**
	 * Deserialize binary data to message
	 * @param instance message instance
	 */
	static deserializeBinary(bytes) {
		const instance = new OperationMetadata();
		OperationMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
		return instance;
	}
	/**
	 * Check all the properties and set default protobuf values if necessary
	 * @param _instance message instance
	 */
	static refineValues(_instance) {
		_instance.status = _instance.status || 0;
		_instance.parentOperationName = _instance.parentOperationName || '';
		_instance.subOperationNames = _instance.subOperationNames || [];
		_instance.createTime = _instance.createTime || undefined;
		_instance.startTime = _instance.startTime || undefined;
		_instance.endTime = _instance.endTime || undefined;
		_instance.isCancellationRequested = _instance.isCancellationRequested || false;
		_instance.cancelCommand = _instance.cancelCommand || '';
		_instance.userIdCreated = _instance.userIdCreated || '';
		_instance.userIdCancelled = _instance.userIdCancelled || '';
		_instance.projectParent = _instance.projectParent || '';
		_instance.operationType = _instance.operationType || 0;
		_instance.hostName = _instance.hostName || '';
		_instance.numReruns = _instance.numReruns || 0;
		_instance.maxNumReruns = _instance.maxNumReruns || 0;
		_instance.description = _instance.description || '';
		_instance.log = _instance.log || [];
		_instance.logLimit = _instance.logLimit || 0;
	}
	/**
	 * Deserializes / reads binary message into message instance using provided binary reader
	 * @param _instance message instance
	 * @param _reader binary reader instance
	 */
	static deserializeBinaryFromReader(_instance, _reader) {
		while (_reader.nextField()) {
			if (_reader.isEndGroup()) break;
			switch (_reader.getFieldNumber()) {
				case 1:
					_instance.status = _reader.readEnum();
					break;
				case 2:
					_instance.parentOperationName = _reader.readString();
					break;
				case 3:
					(_instance.subOperationNames = _instance.subOperationNames || []).push(_reader.readString());
					break;
				case 4:
					_instance.createTime = new googleProtobuf000.Timestamp();
					_reader.readMessage(_instance.createTime, googleProtobuf000.Timestamp.deserializeBinaryFromReader);
					break;
				case 5:
					_instance.startTime = new googleProtobuf000.Timestamp();
					_reader.readMessage(_instance.startTime, googleProtobuf000.Timestamp.deserializeBinaryFromReader);
					break;
				case 6:
					_instance.endTime = new googleProtobuf000.Timestamp();
					_reader.readMessage(_instance.endTime, googleProtobuf000.Timestamp.deserializeBinaryFromReader);
					break;
				case 7:
					_instance.isCancellationRequested = _reader.readBool();
					break;
				case 8:
					_instance.cancelCommand = _reader.readString();
					break;
				case 9:
					_instance.userIdCreated = _reader.readString();
					break;
				case 10:
					_instance.userIdCancelled = _reader.readString();
					break;
				case 11:
					_instance.projectParent = _reader.readString();
					break;
				case 12:
					_instance.operationType = _reader.readEnum();
					break;
				case 13:
					_instance.hostName = _reader.readString();
					break;
				case 14:
					_instance.numReruns = _reader.readInt32();
					break;
				case 15:
					_instance.maxNumReruns = _reader.readInt32();
					break;
				case 16:
					_instance.description = _reader.readString();
					break;
				case 17:
					(_instance.log = _instance.log || []).push(_reader.readString());
					break;
				case 18:
					_instance.logLimit = _reader.readInt32();
					break;
				default:
					_reader.skipField();
			}
		}
		OperationMetadata.refineValues(_instance);
	}
	/**
	 * Serializes a message to binary format using provided binary reader
	 * @param _instance message instance
	 * @param _writer binary writer instance
	 */
	static serializeBinaryToWriter(_instance, _writer) {
		if (_instance.status) {
			_writer.writeEnum(1, _instance.status);
		}
		if (_instance.parentOperationName) {
			_writer.writeString(2, _instance.parentOperationName);
		}
		if (_instance.subOperationNames && _instance.subOperationNames.length) {
			_writer.writeRepeatedString(3, _instance.subOperationNames);
		}
		if (_instance.createTime) {
			_writer.writeMessage(4, _instance.createTime, googleProtobuf000.Timestamp.serializeBinaryToWriter);
		}
		if (_instance.startTime) {
			_writer.writeMessage(5, _instance.startTime, googleProtobuf000.Timestamp.serializeBinaryToWriter);
		}
		if (_instance.endTime) {
			_writer.writeMessage(6, _instance.endTime, googleProtobuf000.Timestamp.serializeBinaryToWriter);
		}
		if (_instance.isCancellationRequested) {
			_writer.writeBool(7, _instance.isCancellationRequested);
		}
		if (_instance.cancelCommand) {
			_writer.writeString(8, _instance.cancelCommand);
		}
		if (_instance.userIdCreated) {
			_writer.writeString(9, _instance.userIdCreated);
		}
		if (_instance.userIdCancelled) {
			_writer.writeString(10, _instance.userIdCancelled);
		}
		if (_instance.projectParent) {
			_writer.writeString(11, _instance.projectParent);
		}
		if (_instance.operationType) {
			_writer.writeEnum(12, _instance.operationType);
		}
		if (_instance.hostName) {
			_writer.writeString(13, _instance.hostName);
		}
		if (_instance.numReruns) {
			_writer.writeInt32(14, _instance.numReruns);
		}
		if (_instance.maxNumReruns) {
			_writer.writeInt32(15, _instance.maxNumReruns);
		}
		if (_instance.description) {
			_writer.writeString(16, _instance.description);
		}
		if (_instance.log && _instance.log.length) {
			_writer.writeRepeatedString(17, _instance.log);
		}
		if (_instance.logLimit) {
			_writer.writeInt32(18, _instance.logLimit);
		}
	}
	/**
	 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
	 * @param _value initial values object or instance of OperationMetadata to deeply clone from
	 */
	constructor(_value) {
		_value = _value || {};
		this.status = _value.status;
		this.parentOperationName = _value.parentOperationName;
		this.subOperationNames = (_value.subOperationNames || []).slice();
		this.createTime = _value.createTime ? new googleProtobuf000.Timestamp(_value.createTime) : undefined;
		this.startTime = _value.startTime ? new googleProtobuf000.Timestamp(_value.startTime) : undefined;
		this.endTime = _value.endTime ? new googleProtobuf000.Timestamp(_value.endTime) : undefined;
		this.isCancellationRequested = _value.isCancellationRequested;
		this.cancelCommand = _value.cancelCommand;
		this.userIdCreated = _value.userIdCreated;
		this.userIdCancelled = _value.userIdCancelled;
		this.projectParent = _value.projectParent;
		this.operationType = _value.operationType;
		this.hostName = _value.hostName;
		this.numReruns = _value.numReruns;
		this.maxNumReruns = _value.maxNumReruns;
		this.description = _value.description;
		this.log = (_value.log || []).slice();
		this.logLimit = _value.logLimit;
		OperationMetadata.refineValues(this);
	}
	get status() {
		return this._status;
	}
	set status(value) {
		this._status = value;
	}
	get parentOperationName() {
		return this._parentOperationName;
	}
	set parentOperationName(value) {
		this._parentOperationName = value;
	}
	get subOperationNames() {
		return this._subOperationNames;
	}
	set subOperationNames(value) {
		this._subOperationNames = value;
	}
	get createTime() {
		return this._createTime;
	}
	set createTime(value) {
		this._createTime = value;
	}
	get startTime() {
		return this._startTime;
	}
	set startTime(value) {
		this._startTime = value;
	}
	get endTime() {
		return this._endTime;
	}
	set endTime(value) {
		this._endTime = value;
	}
	get isCancellationRequested() {
		return this._isCancellationRequested;
	}
	set isCancellationRequested(value) {
		this._isCancellationRequested = value;
	}
	get cancelCommand() {
		return this._cancelCommand;
	}
	set cancelCommand(value) {
		this._cancelCommand = value;
	}
	get userIdCreated() {
		return this._userIdCreated;
	}
	set userIdCreated(value) {
		this._userIdCreated = value;
	}
	get userIdCancelled() {
		return this._userIdCancelled;
	}
	set userIdCancelled(value) {
		this._userIdCancelled = value;
	}
	get projectParent() {
		return this._projectParent;
	}
	set projectParent(value) {
		this._projectParent = value;
	}
	get operationType() {
		return this._operationType;
	}
	set operationType(value) {
		this._operationType = value;
	}
	get hostName() {
		return this._hostName;
	}
	set hostName(value) {
		this._hostName = value;
	}
	get numReruns() {
		return this._numReruns;
	}
	set numReruns(value) {
		this._numReruns = value;
	}
	get maxNumReruns() {
		return this._maxNumReruns;
	}
	set maxNumReruns(value) {
		this._maxNumReruns = value;
	}
	get description() {
		return this._description;
	}
	set description(value) {
		this._description = value;
	}
	get log() {
		return this._log;
	}
	set log(value) {
		this._log = value;
	}
	get logLimit() {
		return this._logLimit;
	}
	set logLimit(value) {
		this._logLimit = value;
	}
	/**
	 * Serialize message to binary data
	 * @param instance message instance
	 */
	serializeBinary() {
		const writer = new BinaryWriter();
		OperationMetadata.serializeBinaryToWriter(this, writer);
		return writer.getResultBuffer();
	}
	/**
	 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
	 */
	toObject() {
		return {
			status: this.status,
			parentOperationName: this.parentOperationName,
			subOperationNames: (this.subOperationNames || []).slice(),
			createTime: this.createTime ? this.createTime.toObject() : undefined,
			startTime: this.startTime ? this.startTime.toObject() : undefined,
			endTime: this.endTime ? this.endTime.toObject() : undefined,
			isCancellationRequested: this.isCancellationRequested,
			cancelCommand: this.cancelCommand,
			userIdCreated: this.userIdCreated,
			userIdCancelled: this.userIdCancelled,
			projectParent: this.projectParent,
			operationType: this.operationType,
			hostName: this.hostName,
			numReruns: this.numReruns,
			maxNumReruns: this.maxNumReruns,
			description: this.description,
			log: (this.log || []).slice(),
			logLimit: this.logLimit
		};
	}
	/**
	 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
	 */
	toJSON() {
		return this.toObject();
	}
	/**
	 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
	 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
	 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
	 */
	toProtobufJSON(
		// @ts-ignore
		options
	) {
		return {
			status: OperationMetadata.Status[this.status === null || this.status === undefined ? 0 : this.status],
			parentOperationName: this.parentOperationName,
			subOperationNames: (this.subOperationNames || []).slice(),
			createTime: this.createTime ? this.createTime.toProtobufJSON(options) : null,
			startTime: this.startTime ? this.startTime.toProtobufJSON(options) : null,
			endTime: this.endTime ? this.endTime.toProtobufJSON(options) : null,
			isCancellationRequested: this.isCancellationRequested,
			cancelCommand: this.cancelCommand,
			userIdCreated: this.userIdCreated,
			userIdCancelled: this.userIdCancelled,
			projectParent: this.projectParent,
			operationType:
				OperationMetadata.OperationType[
					this.operationType === null || this.operationType === undefined ? 0 : this.operationType
				],
			hostName: this.hostName,
			numReruns: this.numReruns,
			maxNumReruns: this.maxNumReruns,
			description: this.description,
			log: (this.log || []).slice(),
			logLimit: this.logLimit
		};
	}
}
(function (OperationMetadata) {
	let Status;
	(function (Status) {
		Status[(Status['STATUS_UNSPECIFIED'] = 0)] = 'STATUS_UNSPECIFIED';
		Status[(Status['NOT_STARTED'] = 1)] = 'NOT_STARTED';
		Status[(Status['IN_PROGRESS'] = 2)] = 'IN_PROGRESS';
		Status[(Status['DONE'] = 3)] = 'DONE';
		Status[(Status['CANCELLED'] = 4)] = 'CANCELLED';
		Status[(Status['FAILED'] = 5)] = 'FAILED';
	})((Status = OperationMetadata.Status || (OperationMetadata.Status = {})));
	let OperationType;
	(function (OperationType) {
		OperationType[(OperationType['OPERATION_TYPE_UNSPECIFIED'] = 0)] = 'OPERATION_TYPE_UNSPECIFIED';
		OperationType[(OperationType['CREATE_AGENT'] = 1)] = 'CREATE_AGENT';
		OperationType[(OperationType['IMPORT_AGENT'] = 2)] = 'IMPORT_AGENT';
		OperationType[(OperationType['EXPORT_AGENT'] = 3)] = 'EXPORT_AGENT';
		OperationType[(OperationType['DELETE_AGENT'] = 4)] = 'DELETE_AGENT';
		OperationType[(OperationType['RESTORE_AGENT'] = 5)] = 'RESTORE_AGENT';
		OperationType[(OperationType['BUILD_AGENT_CACHE'] = 6)] = 'BUILD_AGENT_CACHE';
		OperationType[(OperationType['TRAIN_AGENT'] = 7)] = 'TRAIN_AGENT';
		OperationType[(OperationType['EXPORT_BENCHMARK_AGENT'] = 8)] = 'EXPORT_BENCHMARK_AGENT';
	})((OperationType = OperationMetadata.OperationType || (OperationMetadata.OperationType = {})));
})(OperationMetadata || (OperationMetadata = {}));
//# sourceMappingURL=data:application/json;base64,
