/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './utility.pb';
import { GRPC_UTILITIES_CLIENT_SETTINGS } from './utility.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.Utilities
 */
class UtilitiesClient {
	handler;
	client;
	/**
	 * Raw RPC implementation for each service client method.
	 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
	 * Attention: these methods do not throw errors when non-zero status codes are received.
	 */
	$raw = {
		/**
		 * Unary call: /ondewo.nlu.Utilities/ValidateRegex
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.ValidateRegexResponse>>
		 */
		validateRegex: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/ValidateRegex',
				requestData,
				requestMetadata,
				requestClass: thisProto.ValidateRegexRequest,
				responseClass: thisProto.ValidateRegexResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/ValidateEmbeddedRegex
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.ValidateEmbeddedRegexResponse>>
		 */
		validateEmbeddedRegex: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/ValidateEmbeddedRegex',
				requestData,
				requestMetadata,
				requestClass: thisProto.ValidateEmbeddedRegexRequest,
				responseClass: thisProto.ValidateEmbeddedRegexResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/CleanAllIntents
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.CleanAllIntentsResponse>>
		 */
		cleanAllIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/CleanAllIntents',
				requestData,
				requestMetadata,
				requestClass: thisProto.CleanAllIntentsRequest,
				responseClass: thisProto.CleanAllIntentsResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/CleanIntent
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.CleanIntentResponse>>
		 */
		cleanIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/CleanIntent',
				requestData,
				requestMetadata,
				requestClass: thisProto.CleanIntentRequest,
				responseClass: thisProto.CleanIntentResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/CleanAllEntityTypes
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.CleanAllEntityTypesResponse>>
		 */
		cleanAllEntityTypes: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/CleanAllEntityTypes',
				requestData,
				requestMetadata,
				requestClass: thisProto.CleanAllEntityTypesRequest,
				responseClass: thisProto.CleanAllEntityTypesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/CleanEntityType
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.CleanEntityTypeResponse>>
		 */
		cleanEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/CleanEntityType',
				requestData,
				requestMetadata,
				requestClass: thisProto.CleanEntityTypeRequest,
				responseClass: thisProto.CleanEntityTypeResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/AddTrainingPhrases
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.AddTrainingPhrasesResponse>>
		 */
		addTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/AddTrainingPhrases',
				requestData,
				requestMetadata,
				requestClass: thisProto.AddTrainingPhrasesRequest,
				responseClass: thisProto.AddTrainingPhrasesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.AddTrainingPhrasesResponse>>
		 */
		addTrainingPhrasesFromCSV: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV',
				requestData,
				requestMetadata,
				requestClass: thisProto.AddTrainingPhrasesFromCSVRequest,
				responseClass: thisProto.AddTrainingPhrasesResponse
			});
		}
	};
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		this.client = clientFactory.createClient('ondewo.nlu.Utilities', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/ValidateRegex
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ValidateRegexResponse>
	 */
	validateRegex(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.validateRegex(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/ValidateEmbeddedRegex
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ValidateEmbeddedRegexResponse>
	 */
	validateEmbeddedRegex(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.validateEmbeddedRegex(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/CleanAllIntents
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CleanAllIntentsResponse>
	 */
	cleanAllIntents(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.cleanAllIntents(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/CleanIntent
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CleanIntentResponse>
	 */
	cleanIntent(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.cleanIntent(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/CleanAllEntityTypes
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CleanAllEntityTypesResponse>
	 */
	cleanAllEntityTypes(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.cleanAllEntityTypes(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/CleanEntityType
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CleanEntityTypeResponse>
	 */
	cleanEntityType(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.cleanEntityType(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/AddTrainingPhrases
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.AddTrainingPhrasesResponse>
	 */
	addTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.addTrainingPhrases(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.AddTrainingPhrasesResponse>
	 */
	addTrainingPhrasesFromCSV(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.addTrainingPhrasesFromCSV(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static ɵfac = i0.ɵɵngDeclareFactory({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: UtilitiesClient,
		deps: [
			{ token: GRPC_UTILITIES_CLIENT_SETTINGS, optional: true },
			{ token: GRPC_CLIENT_FACTORY },
			{ token: i1.GrpcHandler }
		],
		target: i0.ɵɵFactoryTarget.Injectable
	});
	static ɵprov = i0.ɵɵngDeclareInjectable({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: UtilitiesClient,
		providedIn: 'any'
	});
}
export { UtilitiesClient };
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.0.2',
	ngImport: i0,
	type: UtilitiesClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_UTILITIES_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
