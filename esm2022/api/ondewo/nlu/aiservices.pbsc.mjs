/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './aiservices.pb';
import { GRPC_AI_SERVICES_CLIENT_SETTINGS } from './aiservices.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.AiServices
 */
class AiServicesClient {
	handler;
	client;
	/**
	 * Raw RPC implementation for each service client method.
	 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
	 * Attention: these methods do not throw errors when non-zero status codes are received.
	 */
	$raw = {
		/**
		 * Unary call: /ondewo.nlu.AiServices/ExtractEntities
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.ExtractEntitiesResponse>>
		 */
		extractEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/ExtractEntities',
				requestData,
				requestMetadata,
				requestClass: thisProto.ExtractEntitiesRequest,
				responseClass: thisProto.ExtractEntitiesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/GenerateUserSays
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.GenerateUserSaysResponse>>
		 */
		generateUserSays: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/GenerateUserSays',
				requestData,
				requestMetadata,
				requestClass: thisProto.GenerateUserSaysRequest,
				responseClass: thisProto.GenerateUserSaysResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/GenerateResponses
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.GenerateResponsesResponse>>
		 */
		generateResponses: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/GenerateResponses',
				requestData,
				requestMetadata,
				requestClass: thisProto.GenerateResponsesRequest,
				responseClass: thisProto.GenerateResponsesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/GetAlternativeSentences
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.GetAlternativeSentencesResponse>>
		 */
		getAlternativeSentences: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/GetAlternativeSentences',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetAlternativeSentencesRequest,
				responseClass: thisProto.GetAlternativeSentencesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/GetAlternativeTrainingPhrases
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.GetAlternativeTrainingPhrasesResponse>>
		 */
		getAlternativeTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/GetAlternativeTrainingPhrases',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetAlternativeTrainingPhrasesRequest,
				responseClass: thisProto.GetAlternativeTrainingPhrasesResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/GetSynonyms
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.GetSynonymsResponse>>
		 */
		getSynonyms: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/GetSynonyms',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetSynonymsRequest,
				responseClass: thisProto.GetSynonymsResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/ClassifyIntents
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.ClassifyIntentsResponse>>
		 */
		classifyIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/ClassifyIntents',
				requestData,
				requestMetadata,
				requestClass: thisProto.ClassifyIntentsRequest,
				responseClass: thisProto.ClassifyIntentsResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.AiServices/ExtractEntitiesFuzzy
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.ExtractEntitiesResponse>>
		 */
		extractEntitiesFuzzy: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.AiServices/ExtractEntitiesFuzzy',
				requestData,
				requestMetadata,
				requestClass: thisProto.ExtractEntitiesFuzzyRequest,
				responseClass: thisProto.ExtractEntitiesResponse
			});
		}
	};
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		this.client = clientFactory.createClient('ondewo.nlu.AiServices', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/ExtractEntities
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ExtractEntitiesResponse>
	 */
	extractEntities(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.extractEntities(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/GenerateUserSays
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GenerateUserSaysResponse>
	 */
	generateUserSays(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.generateUserSays(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/GenerateResponses
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GenerateResponsesResponse>
	 */
	generateResponses(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.generateResponses(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/GetAlternativeSentences
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetAlternativeSentencesResponse>
	 */
	getAlternativeSentences(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getAlternativeSentences(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/GetAlternativeTrainingPhrases
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetAlternativeTrainingPhrasesResponse>
	 */
	getAlternativeTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw
			.getAlternativeTrainingPhrases(requestData, requestMetadata)
			.pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/GetSynonyms
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.GetSynonymsResponse>
	 */
	getSynonyms(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getSynonyms(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/ClassifyIntents
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ClassifyIntentsResponse>
	 */
	classifyIntents(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.classifyIntents(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.AiServices/ExtractEntitiesFuzzy
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ExtractEntitiesResponse>
	 */
	extractEntitiesFuzzy(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.extractEntitiesFuzzy(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static ɵfac = i0.ɵɵngDeclareFactory({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: AiServicesClient,
		deps: [
			{ token: GRPC_AI_SERVICES_CLIENT_SETTINGS, optional: true },
			{ token: GRPC_CLIENT_FACTORY },
			{ token: i1.GrpcHandler }
		],
		target: i0.ɵɵFactoryTarget.Injectable
	});
	static ɵprov = i0.ɵɵngDeclareInjectable({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: AiServicesClient,
		providedIn: 'any'
	});
}
export { AiServicesClient };
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.0.2',
	ngImport: i0,
	type: AiServicesClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_AI_SERVICES_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
