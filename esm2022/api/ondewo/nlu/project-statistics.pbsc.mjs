/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './project-statistics.pb';
import * as ondewoNlu004 from '../../ondewo/nlu/common.pb';
import { GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS } from './project-statistics.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.ProjectStatistics
 */
class ProjectStatisticsClient {
	handler;
	client;
	/**
	 * Raw RPC implementation for each service client method.
	 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
	 * Attention: these methods do not throw errors when non-zero status codes are received.
	 */
	$raw = {
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetIntentCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getIntentCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetIntentCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetIntentCountRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetEntityTypeCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getEntityTypeCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetEntityTypeCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetEntityTypeCountRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetUserCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getUserCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetUserCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetSessionCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getSessionCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetSessionCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getTrainingPhraseCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectElementStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetResponseCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getResponseCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetResponseCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectElementStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetEntityValueCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getEntityValueCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetEntityValueCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectElementStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		},
		/**
		 * Unary call: /ondewo.nlu.ProjectStatistics/GetEntitySynonymCount
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
		 */
		getEntitySynonymCount: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.nlu.ProjectStatistics/GetEntitySynonymCount',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetProjectElementStatRequest,
				responseClass: ondewoNlu004.StatResponse
			});
		}
	};
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		this.client = clientFactory.createClient('ondewo.nlu.ProjectStatistics', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetIntentCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getIntentCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getIntentCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetEntityTypeCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getEntityTypeCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getEntityTypeCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetUserCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getUserCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getUserCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetSessionCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getSessionCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getSessionCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getTrainingPhraseCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getTrainingPhraseCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetResponseCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getResponseCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getResponseCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetEntityValueCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getEntityValueCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getEntityValueCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.ProjectStatistics/GetEntitySynonymCount
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoNlu004.StatResponse>
	 */
	getEntitySynonymCount(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getEntitySynonymCount(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static ɵfac = i0.ɵɵngDeclareFactory({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: ProjectStatisticsClient,
		deps: [
			{ token: GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS, optional: true },
			{ token: GRPC_CLIENT_FACTORY },
			{ token: i1.GrpcHandler }
		],
		target: i0.ɵɵFactoryTarget.Injectable
	});
	static ɵprov = i0.ɵɵngDeclareInjectable({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: ProjectStatisticsClient,
		providedIn: 'any'
	});
}
export { ProjectStatisticsClient };
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.0.2',
	ngImport: i0,
	type: ProjectStatisticsClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
