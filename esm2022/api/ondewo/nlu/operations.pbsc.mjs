/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './operations.pb';
import * as googleProtobuf005 from '@ngx-grpc/well-known-types';
import { GRPC_OPERATIONS_CLIENT_SETTINGS } from './operations.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.nlu.Operations
 */
export class OperationsClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.nlu.Operations/ListOperations
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ListOperationsResponse>>
			 */
			listOperations: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Operations/ListOperations',
					requestData,
					requestMetadata,
					requestClass: thisProto.ListOperationsRequest,
					responseClass: thisProto.ListOperationsResponse
				});
			},
			/**
			 * Unary call: /ondewo.nlu.Operations/GetOperation
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.Operation>>
			 */
			getOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Operations/GetOperation',
					requestData,
					requestMetadata,
					requestClass: thisProto.GetOperationRequest,
					responseClass: thisProto.Operation
				});
			},
			/**
			 * Unary call: /ondewo.nlu.Operations/DeleteOperation
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf005.Empty>>
			 */
			deleteOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Operations/DeleteOperation',
					requestData,
					requestMetadata,
					requestClass: thisProto.DeleteOperationRequest,
					responseClass: googleProtobuf005.Empty
				});
			},
			/**
			 * Unary call: /ondewo.nlu.Operations/CancelOperation
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf005.Empty>>
			 */
			cancelOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.nlu.Operations/CancelOperation',
					requestData,
					requestMetadata,
					requestClass: thisProto.CancelOperationRequest,
					responseClass: googleProtobuf005.Empty
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.nlu.Operations', settings);
	}
	/**
	 * Unary call @/ondewo.nlu.Operations/ListOperations
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ListOperationsResponse>
	 */
	listOperations(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.listOperations(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Operations/GetOperation
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.Operation>
	 */
	getOperation(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getOperation(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Operations/DeleteOperation
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf005.Empty>
	 */
	deleteOperation(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.deleteOperation(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.nlu.Operations/CancelOperation
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf005.Empty>
	 */
	cancelOperation(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.cancelOperation(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static {
		this.ɵfac = i0.ɵɵngDeclareFactory({
			minVersion: '12.0.0',
			version: '16.2.6',
			ngImport: i0,
			type: OperationsClient,
			deps: [
				{ token: GRPC_OPERATIONS_CLIENT_SETTINGS, optional: true },
				{ token: GRPC_CLIENT_FACTORY },
				{ token: i1.GrpcHandler }
			],
			target: i0.ɵɵFactoryTarget.Injectable
		});
	}
	static {
		this.ɵprov = i0.ɵɵngDeclareInjectable({
			minVersion: '12.0.0',
			version: '16.2.6',
			ngImport: i0,
			type: OperationsClient,
			providedIn: 'any'
		});
	}
}
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.2.6',
	ngImport: i0,
	type: OperationsClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_OPERATIONS_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
