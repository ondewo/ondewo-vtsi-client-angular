/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './projects.pb';
import { GRPC_PROJECTS_CLIENT_SETTINGS } from './projects.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.vtsi.Projects
 */
class ProjectsClient {
	handler;
	client;
	/**
	 * Raw RPC implementation for each service client method.
	 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
	 * Attention: these methods do not throw errors when non-zero status codes are received.
	 */
	$raw = {
		/**
		 * Unary call: /ondewo.vtsi.Projects/CreateVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.CreateVtsiProjectResponse>>
		 */
		createVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/CreateVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.CreateVtsiProjectRequest,
				responseClass: thisProto.CreateVtsiProjectResponse
			});
		},
		/**
		 * Unary call: /ondewo.vtsi.Projects/GetVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.VtsiProject>>
		 */
		getVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/GetVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.GetVtsiProjectRequest,
				responseClass: thisProto.VtsiProject
			});
		},
		/**
		 * Unary call: /ondewo.vtsi.Projects/UpdateVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.UpdateVtsiProjectResponse>>
		 */
		updateVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/UpdateVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.UpdateVtsiProjectRequest,
				responseClass: thisProto.UpdateVtsiProjectResponse
			});
		},
		/**
		 * Unary call: /ondewo.vtsi.Projects/DeleteVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.DeleteVtsiProjectResponse>>
		 */
		deleteVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/DeleteVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.DeleteVtsiProjectRequest,
				responseClass: thisProto.DeleteVtsiProjectResponse
			});
		},
		/**
		 * Unary call: /ondewo.vtsi.Projects/DeployVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.DeployVtsiProjectResponse>>
		 */
		deployVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/DeployVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.DeployVtsiProjectRequest,
				responseClass: thisProto.DeployVtsiProjectResponse
			});
		},
		/**
		 * Unary call: /ondewo.vtsi.Projects/UndeployVtsiProject
		 *
		 * @param requestMessage Request message
		 * @param requestMetadata Request metadata
		 * @returns Observable<GrpcEvent<thisProto.UndeployVtsiProjectResponse>>
		 */
		undeployVtsiProject: (requestData, requestMetadata = new GrpcMetadata()) => {
			return this.handler.handle({
				type: GrpcCallType.unary,
				client: this.client,
				path: '/ondewo.vtsi.Projects/UndeployVtsiProject',
				requestData,
				requestMetadata,
				requestClass: thisProto.UndeployVtsiProjectRequest,
				responseClass: thisProto.UndeployVtsiProjectResponse
			});
		}
	};
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		this.client = clientFactory.createClient('ondewo.vtsi.Projects', settings);
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/CreateVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CreateVtsiProjectResponse>
	 */
	createVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.createVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/GetVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.VtsiProject>
	 */
	getVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/UpdateVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.UpdateVtsiProjectResponse>
	 */
	updateVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.updateVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/DeleteVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.DeleteVtsiProjectResponse>
	 */
	deleteVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.deleteVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/DeployVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.DeployVtsiProjectResponse>
	 */
	deployVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.deployVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.vtsi.Projects/UndeployVtsiProject
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.UndeployVtsiProjectResponse>
	 */
	undeployVtsiProject(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.undeployVtsiProject(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static ɵfac = i0.ɵɵngDeclareFactory({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: ProjectsClient,
		deps: [
			{ token: GRPC_PROJECTS_CLIENT_SETTINGS, optional: true },
			{ token: GRPC_CLIENT_FACTORY },
			{ token: i1.GrpcHandler }
		],
		target: i0.ɵɵFactoryTarget.Injectable
	});
	static ɵprov = i0.ɵɵngDeclareInjectable({
		minVersion: '12.0.0',
		version: '16.0.2',
		ngImport: i0,
		type: ProjectsClient,
		providedIn: 'any'
	});
}
export { ProjectsClient };
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.0.2',
	ngImport: i0,
	type: ProjectsClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_PROJECTS_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
